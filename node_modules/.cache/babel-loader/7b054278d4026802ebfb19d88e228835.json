{"ast":null,"code":"var _jsxFileName = \"D:\\\\Resume Projects\\\\Contact-log\\\\src\\\\components\\\\meetups\\\\NewMeetupForm.js\",\n    _s = $RefreshSig$();\n\nimport { useRef } from 'react';\nimport Card from '../ui/Card';\nimport classes from './NewMeetupForm.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction NewMeetupForm(props) {\n  _s();\n\n  //1st ref is for the title input\n  const titleInputRef = useRef(); //we create a reference object by calling the \"useRef()\", we store this object returned\n\n  const imageInputRef = useRef();\n  const addressInputRef = useRef();\n  const descriptionInputRef = useRef();\n\n  function submitHandler(event) {\n    // the default behaviour of the browser is to sent a request to the server serving this page to automatically, when submitted\n    event.preventDefault(); //used to prevent the browser default behaviour of reloading the page when the form is submitted\n    //we want to send the http request behind the scene without reloading the page\n    //we want to read the values that were given by the users\n    //we can either use \"useState()\" again and at the \"onChange\" event listener that we can put in the input tag, but this way, at every keystroke, the function is triggered as the state is changing at every ketstroke, and then we can extract the value from the event object which we will recieve for that event and update our state for that given input with the entered value\n    //or we can use \"ref\"\n    //\"ref\" stands for reference, and react allows us to set up references to DOM elements, we can get direct access to DOM elements\n\n    const enteredTitle = titleInputRef.current.value; // titleInputRef.current.value = 'Some new value';  //we can also change it, but if we want to change what is shown on the screen we should  use \"useState\"\n    //\"useRef\" is good for reading input values\n\n    const enteredImage = imageInputRef.current.value;\n    const enteredAddress = addressInputRef.current.value;\n    const enteredDescription = descriptionInputRef.current.value;\n    const meetupData = {\n      title: enteredTitle,\n      image: enteredImage,\n      address: enteredAddress,\n      description: enteredDescription\n    }; // console.log(meetupData);\n    //we want to sent meetup data to the server, with react (SPA applications) we need a backend apis to send requests\n    //we dont connect a frontend application to a database itself as it will have security issues, all the code that we write in the React application is exposed to the visitors of the page, and database credentials would be in there as well, thats why we need a backend api (backend server), to which we can send requests, and then its that backend server that connects to a database and stores data, we use firebase as dummy backend\n\n    props.onAddMeetup(meetupData);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: classes.form,\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"title\",\n          children: \"Meetup Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          required: true,\n          id: \"title\",\n          ref: titleInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"image\",\n          children: \"Meetup Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"url\",\n          required: true,\n          id: \"image\",\n          ref: imageInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"address\",\n          children: \"Address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          required: true,\n          id: \"address\",\n          ref: addressInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"description\",\n          children: \"Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"description\",\n          required: true,\n          rows: \"5\",\n          ref: descriptionInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Add Meetup\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(NewMeetupForm, \"rnfbxkM5ubxegaVnK79k9LUTStI=\");\n\n_c = NewMeetupForm;\nexport default NewMeetupForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewMeetupForm\");","map":{"version":3,"names":["useRef","Card","classes","NewMeetupForm","props","titleInputRef","imageInputRef","addressInputRef","descriptionInputRef","submitHandler","event","preventDefault","enteredTitle","current","value","enteredImage","enteredAddress","enteredDescription","meetupData","title","image","address","description","onAddMeetup","form","control","actions"],"sources":["D:/Resume Projects/Contact-log/src/components/meetups/NewMeetupForm.js"],"sourcesContent":["import { useRef } from 'react';\r\nimport Card from '../ui/Card';\r\nimport classes from './NewMeetupForm.module.css';\r\n\r\nfunction NewMeetupForm(props) {\r\n  //1st ref is for the title input\r\n  const titleInputRef = useRef(); //we create a reference object by calling the \"useRef()\", we store this object returned\r\n\r\n  const imageInputRef = useRef();\r\n  const addressInputRef = useRef();\r\n  const descriptionInputRef = useRef();\r\n\r\n  function submitHandler(event) {\r\n    // the default behaviour of the browser is to sent a request to the server serving this page to automatically, when submitted\r\n    event.preventDefault(); //used to prevent the browser default behaviour of reloading the page when the form is submitted\r\n    //we want to send the http request behind the scene without reloading the page\r\n\r\n    //we want to read the values that were given by the users\r\n\r\n    //we can either use \"useState()\" again and at the \"onChange\" event listener that we can put in the input tag, but this way, at every keystroke, the function is triggered as the state is changing at every ketstroke, and then we can extract the value from the event object which we will recieve for that event and update our state for that given input with the entered value\r\n\r\n    //or we can use \"ref\"\r\n    //\"ref\" stands for reference, and react allows us to set up references to DOM elements, we can get direct access to DOM elements\r\n\r\n    const enteredTitle = titleInputRef.current.value;\r\n    // titleInputRef.current.value = 'Some new value';  //we can also change it, but if we want to change what is shown on the screen we should  use \"useState\"\r\n\r\n    //\"useRef\" is good for reading input values\r\n\r\n    const enteredImage = imageInputRef.current.value;\r\n    const enteredAddress = addressInputRef.current.value;\r\n    const enteredDescription = descriptionInputRef.current.value;\r\n\r\n    const meetupData = {\r\n      title: enteredTitle,\r\n      image: enteredImage,\r\n      address: enteredAddress,\r\n      description: enteredDescription,\r\n    };\r\n\r\n    // console.log(meetupData);\r\n    //we want to sent meetup data to the server, with react (SPA applications) we need a backend apis to send requests\r\n    //we dont connect a frontend application to a database itself as it will have security issues, all the code that we write in the React application is exposed to the visitors of the page, and database credentials would be in there as well, thats why we need a backend api (backend server), to which we can send requests, and then its that backend server that connects to a database and stores data, we use firebase as dummy backend\r\n\r\n    props.onAddMeetup(meetupData);\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <form className={classes.form} onSubmit={submitHandler}>\r\n        {/* we can add onSubmit={submitHandler}, when we submit the form, the \"submit\" event be caught here and the function will be called */}\r\n        <div className={classes.control}>\r\n          <label htmlFor=\"title\">Meetup Title</label>\r\n          {/* \"for\" is a keyword in js, so we set this using htmlFor */}\r\n          <input type=\"text\" required id=\"title\" ref={titleInputRef} />\r\n          {/* another special prop is \"ref\" is used to connect the created ref object to the input */}\r\n        </div>\r\n        <div className={classes.control}>\r\n          <label htmlFor=\"image\">Meetup Image</label>\r\n          <input type=\"url\" required id=\"image\" ref={imageInputRef} />\r\n        </div>\r\n        <div className={classes.control}>\r\n          <label htmlFor=\"address\">Address</label>\r\n          <input type=\"text\" required id=\"address\" ref={addressInputRef} />\r\n        </div>\r\n        <div className={classes.control}>\r\n          <label htmlFor=\"description\">Description</label>\r\n          <textarea\r\n            id=\"description\"\r\n            required\r\n            rows=\"5\"\r\n            ref={descriptionInputRef}\r\n          ></textarea>\r\n        </div>\r\n        <div className={classes.actions}>\r\n          <button>Add Meetup</button>\r\n          {/* by default a \"subsmit\" event will be emmited, when clicked on the button in the form, we can then catch the event in the form tag */}\r\n        </div>\r\n      </form>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default NewMeetupForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}